/**
 * attendance.constants.ts
 * 
 * Constantes y configuraciones centralizadas para el sistema de asistencia.
 * Define estados de turno, tipos de anomal√≠as, plazos y configuraciones globales.
 */

// === ESTADOS DE TURNO ===
export enum ShiftStatus {
  EN_CURSO = 'EN_CURSO',           // Turno activo, dentro del rango horario
  FUTURO = 'FUTURO',               // Turno no ha iniciado, hora actual < hora inicio
  FINALIZADO = 'FINALIZADO',       // Turno concluido, hora actual > hora fin
  NO_AUTORIZADO = 'NO_AUTORIZADO'  // Usuario sin permisos o no asignado
}

export const SHIFT_STATUS_LABELS: Record<ShiftStatus, string> = {
  [ShiftStatus.EN_CURSO]: 'üü¢ En Curso',
  [ShiftStatus.FUTURO]: 'üïí Pr√≥ximo',
  [ShiftStatus.FINALIZADO]: 'üî¥ Finalizado',
  [ShiftStatus.NO_AUTORIZADO]: '‚õî No Autorizado'
};

export const SHIFT_STATUS_DESCRIPTIONS: Record<ShiftStatus, string> = {
  [ShiftStatus.EN_CURSO]: 'El turno est√° activo. Puedes marcar asistencia.',
  [ShiftStatus.FUTURO]: 'El turno a√∫n no ha iniciado. Espera la hora de inicio.',
  [ShiftStatus.FINALIZADO]: 'El turno ha concluido. No puedes marcar asistencia.',
  [ShiftStatus.NO_AUTORIZADO]: 'No tienes autorizaci√≥n para este turno.'
};

// === TIPOS DE ANOMAL√çAS ===
export enum AnomalyType {
  AUSENCIA = 'AUSENCIA',                     // No se registr√≥ asistencia
  LLEGADA_TARDE = 'LLEGADA_TARDE',           // Check-in despu√©s del horario
  SALIDA_ANTICIPADA = 'SALIDA_ANTICIPADA',   // Check-out antes del horario
  SALIDA_SIN_REGISTRO = 'SALIDA_SIN_REGISTRO' // No registr√≥ check-out
}

export const ANOMALY_TYPE_LABELS: Record<AnomalyType, string> = {
  [AnomalyType.AUSENCIA]: 'Inasistencia',
  [AnomalyType.LLEGADA_TARDE]: 'Llegada Tard√≠a',
  [AnomalyType.SALIDA_ANTICIPADA]: 'Salida Anticipada',
  [AnomalyType.SALIDA_SIN_REGISTRO]: 'Salida sin Registro'
};

export const ANOMALY_TYPE_COLORS: Record<AnomalyType, string> = {
  [AnomalyType.AUSENCIA]: '#EF4444',           // Rojo
  [AnomalyType.LLEGADA_TARDE]: '#F59E0B',      // Amarillo
  [AnomalyType.SALIDA_ANTICIPADA]: '#F97316',  // Naranja
  [AnomalyType.SALIDA_SIN_REGISTRO]: '#8B5CF6' // P√∫rpura
};

// === PLAZOS Y CONFIGURACIONES ===

/**
 * Plazo en d√≠as h√°biles para que el empleado subsane un memorando
 * Despu√©s de este plazo, el memorando pasa a estado EXPIRADO
 */
export const SUBSANATION_DEADLINE_DAYS = 5;

/**
 * Minutos de tolerancia antes de considerar una llegada como tard√≠a
 * Ejemplo: Si el turno inicia a las 7:00 AM y la tolerancia es 15 minutos,
 * se puede marcar hasta las 7:15 AM sin generar memorando
 */
export const DEFAULT_TOLERANCE_MINUTES = 15;

/**
 * Minutos de tolerancia para la salida anticipada
 * Similar a la llegada, se permite una ventana de tolerancia antes del horario oficial
 */
export const EARLY_DEPARTURE_TOLERANCE_MINUTES = 10;

/**
 * Minutos antes del inicio del turno en que se permite marcar asistencia
 * Ejemplo: Si el turno inicia a las 7:00 AM y el margen es 30 minutos,
 * se puede marcar desde las 6:30 AM
 */
export const CHECK_IN_EARLY_MARGIN_MINUTES = 30;

/**
 * Minutos despu√©s del fin del turno en que se permite marcar salida
 * Permite registrar salida aunque el turno haya finalizado oficialmente
 */
export const CHECK_OUT_LATE_MARGIN_MINUTES = 120;

/**
 * Hora del d√≠a (en formato 24h) en que se ejecuta el job de verificaci√≥n de inasistencias
 * Por defecto: 23:00 (11:00 PM)
 */
export const ABSENCE_CHECK_HOUR = 23;
export const ABSENCE_CHECK_MINUTE = 0;

/**
 * Hora del d√≠a en que se ejecuta el job de expiraci√≥n de memorandos
 * Por defecto: 00:30 (12:30 AM)
 */
export const MEMORANDUM_EXPIRY_CHECK_HOUR = 0;
export const MEMORANDUM_EXPIRY_CHECK_MINUTE = 30;

// === C√ìDIGOS DE CARGO ESPECIALES ===

/**
 * C√≥digos de cargo para supernumerarios
 * Estos cargos tienen l√≥gica especial de asignaci√≥n de horarios
 */
export const SUPERNUMERARY_CARGO_CODES = ['SLS_CHS']; // Chatter Supernumerario

/**
 * C√≥digos de turnos permitidos para reemplazo por supernumerarios
 */
export const REPLACEMENT_ALLOWED_SHIFT_TYPES = ['AM', 'PM', 'MADRUGADA'];

// === MENSAJES PARA EL USUARIO ===

export const USER_MESSAGES = {
  // Mensajes de error
  SHIFT_NOT_STARTED: 'No puedes marcar asistencia. Tu turno a√∫n no ha iniciado.',
  SHIFT_ENDED: 'No puedes marcar asistencia. Tu turno ya ha finalizado.',
  NOT_AUTHORIZED: 'No est√°s autorizado para marcar asistencia en este turno.',
  ALREADY_CHECKED_IN: 'Ya has registrado tu entrada para este turno.',
  ALREADY_CHECKED_OUT: 'Ya has registrado tu salida para este turno.',
  NO_CHECK_IN_FOUND: 'Debes registrar tu entrada antes de marcar la salida.',
  
  // Mensajes de advertencia (con anomal√≠a)
  LATE_ARRIVAL_WARNING: (delayMinutes: number, employeeName?: string) => 
    employeeName 
      ? `Est√°s a punto de reemplazar el cargo de ${employeeName}. Tu turno debi√≥ iniciar hace ${delayMinutes} minutos. Esta marcaci√≥n generar√° un memorando por tardanza. Si cuentas con una justificaci√≥n v√°lida, por favor det√°llala para revisi√≥n de tu administrador.`
      : `Est√°s llegando ${delayMinutes} minutos tarde. Esta marcaci√≥n generar√° un memorando por tardanza. Si cuentas con una justificaci√≥n v√°lida, por favor det√°llala para revisi√≥n de tu administrador.`,
  
  EARLY_DEPARTURE_WARNING: (earlyMinutes: number) =>
    `Est√°s saliendo ${earlyMinutes} minutos antes del horario programado. Esta marcaci√≥n generar√° un memorando por salida anticipada que requiere aprobaci√≥n de Recursos Humanos.`,
  
  // Mensajes de √©xito
  CHECK_IN_SUCCESS: 'Entrada registrada correctamente.',
  CHECK_OUT_SUCCESS: 'Salida registrada correctamente.',
  
  // Mensajes de memorando
  MEMORANDUM_GENERATED: (type: string) => 
    `Se ha generado un memorando por ${type}. Tienes ${SUBSANATION_DEADLINE_DAYS} d√≠as h√°biles para subsanarlo.`,
  
  MEMORANDUM_SUBSANED: 'Tu justificaci√≥n ha sido enviada a Recursos Humanos para revisi√≥n.',
  MEMORANDUM_APPROVED: 'Tu justificaci√≥n ha sido aprobada. El memorando no afectar√° tu registro.',
  MEMORANDUM_REJECTED: 'Tu justificaci√≥n ha sido rechazada. El memorando quedar√° registrado como falta.',
  MEMORANDUM_EXPIRED: 'El plazo para subsanar este memorando ha vencido.',
};

// === CONFIGURACIONES DE VALIDACI√ìN ===

/**
 * Configuraci√≥n de validaci√≥n por tipo de marcaci√≥n
 */
export const VALIDATION_CONFIG = {
  CHECK_IN: {
    earlyMarginMinutes: CHECK_IN_EARLY_MARGIN_MINUTES,
    toleranceMinutes: DEFAULT_TOLERANCE_MINUTES,
    requireShiftActive: false, // Permite marcar antes del inicio (con margen)
  },
  CHECK_OUT: {
    lateMarginMinutes: CHECK_OUT_LATE_MARGIN_MINUTES,
    toleranceMinutes: EARLY_DEPARTURE_TOLERANCE_MINUTES,
    requireCheckIn: true, // Requiere que exista un check-in previo
  },
  BREAK_START: {
    requireCheckIn: true,
    requireShiftActive: true,
  },
  BREAK_END: {
    requireBreakStart: true,
    requireShiftActive: true,
  },
};

// === FORMATO DE C√ìDIGO DE MEMORANDO ===

/**
 * Prefijo para el c√≥digo de memorando
 * Formato: MEM-YYYY-#### (ej: MEM-2025-0001)
 */
export const MEMORANDUM_CODE_PREFIX = 'MEM';

/**
 * Genera el c√≥digo de memorando basado en el a√±o y secuencia
 */
export function generateMemorandumCode(year: number, sequence: number): string {
  const paddedSequence = sequence.toString().padStart(4, '0');
  return `${MEMORANDUM_CODE_PREFIX}-${year}-${paddedSequence}`;
}

// === CONFIGURACI√ìN DE NOTIFICACIONES ===

export const NOTIFICATION_CONFIG = {
  // Enviar notificaci√≥n al empleado cuando se genera memorando
  NOTIFY_EMPLOYEE_ON_CREATION: true,
  
  // Enviar notificaci√≥n a RRHH cuando memorando pasa a revisi√≥n
  NOTIFY_RRHH_ON_REVIEW: true,
  
  // Enviar recordatorio al empleado X d√≠as antes del vencimiento
  REMINDER_DAYS_BEFORE_EXPIRY: 2,
  
  // Enviar notificaci√≥n al empleado cuando memorando expira
  NOTIFY_EMPLOYEE_ON_EXPIRY: true,
};

// === TIPOS DE DATOS AUXILIARES ===

export interface ShiftStatusInfo {
  status: ShiftStatus;
  label: string;
  description: string;
  canCheckIn: boolean;
  canCheckOut: boolean;
  currentShift?: {
    id: string;
    name: string;
    startTime: string;
    endTime: string;
  };
  nextShift?: {
    id: string;
    name: string;
    startTime: string;
    startsInMinutes: number;
  };
}

export interface AnomalyDetectionResult {
  hasAnomaly: boolean;
  anomalyType?: AnomalyType;
  details?: {
    expectedTime?: Date;
    actualTime?: Date;
    delayMinutes?: number;
    earlyMinutes?: number;
    message?: string;
  };
}

export interface MemorandumGenerationData {
  type: AnomalyType;
  userId: string;
  empleadoId: string;
  incidentDate: Date;
  expectedTime?: Date;
  actualTime?: Date;
  delayMinutes?: number;
  earlyMinutes?: number;
  shiftId?: string;
  shiftName?: string;
  attendanceRecordId?: string;
  employeeJustification?: string;
}
